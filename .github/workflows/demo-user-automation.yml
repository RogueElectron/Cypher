name: Cypher User Registration Demo

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main, master ]
  
  # Allow manual trigger for hackathon demos
  workflow_dispatch:
    inputs:
      username:
        description: 'Custom username for demo (optional)'
        required: false
        default: ''
      show_browser:
        description: 'Show browser (for debugging)'
        required: false
        default: false
        type: boolean

jobs:
  demo-registration:
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL service
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cypher_db
          POSTGRES_USER: cypher_user
          POSTGRES_PASSWORD: cypher_strong_password_123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      # Redis service  
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          back-end/package.json
          back-end/node_internal_api/package.json
          back-end/test/package.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      working-directory: ./back-end
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      working-directory: ./back-end
      run: |
        # Install main backend dependencies
        npm install
        
        # Install Node API dependencies
        cd node_internal_api
        npm install
        cd ..
        
        # Install automation test dependencies
        cd test
        npm install
        cd ..

    - name: Install Playwright browsers
      working-directory: ./back-end/test
      run: npx playwright install chromium

    - name: Setup environment
      working-directory: ./back-end
      run: |
        # Create .env from template
        cp .env.example .env
        
        # Update for GitHub Actions environment
        sed -i 's/POSTGRES_HOST=127.0.0.1/POSTGRES_HOST=localhost/' .env
        sed -i 's/REDIS_HOST=localhost/REDIS_HOST=localhost/' .env
        
        # Create keys directory
        mkdir -p .keys
        chmod 700 .keys

    - name: Initialize database
      working-directory: ./back-end
      run: |
        # Wait for services to be ready
        sleep 5
        
        # Initialize database tables and encryption
        python migrations/init_db.py --all

    - name: Start Node.js Internal API
      working-directory: ./back-end/node_internal_api
      run: |
        # Start Node API in background
        npm start &
        
        # Wait for it to start
        sleep 10
        
        # Verify it's running
        curl -f http://localhost:3000/health || (echo "Node API failed to start" && exit 1)
      env:
        NODE_ENV: test

    - name: Start Flask Service
      working-directory: ./back-end
      run: |
        # Start Flask in background
        python main.py &
        
        # Wait for it to start
        sleep 15
        
        # Verify it's running
        curl -f http://localhost:5000/ || (echo "Flask service failed to start" && exit 1)
      env:
        FLASK_ENV: development

    - name: Run User Registration Automation
      working-directory: ./back-end/test
      run: |
        # Determine username
        USERNAME="${{ github.event.inputs.username }}"
        if [ -z "$USERNAME" ]; then
          USERNAME="gh_demo_$(date +%s)"
        fi
        
        echo "Running automation for user: $USERNAME"
        
        # Run the automation (headless in CI)
        node demo-user-automation.js http://localhost:5000 "$USERNAME"
      env:
        # Playwright environment for CI
        PLAYWRIGHT_BROWSERS_PATH: /ms-playwright

    - name: Verify Registration Success
      working-directory: ./back-end
      run: |
        # Quick database check to verify user was created
        python -c "
        import sys
        sys.path.append('src')
        from database_config import init_databases, get_db_session
        from models import User
        from encryption_manager import init_encryption
        
        init_encryption()
        init_databases()
        
        with get_db_session() as db:
            user_count = db.query(User).count()
            print(f'Total users in database: {user_count}')
            
            if user_count == 0:
                print('No users found - automation may have failed')
                sys.exit(1)
            else:
                latest_user = db.query(User).order_by(User.created_at.desc()).first()
                print(f'Latest user: {latest_user.username}')
                print(f'TOTP enabled: {latest_user.totp_enabled}')
        "

    - name: Generate Demo Report
      if: always()
      run: |
        echo "# Cypher Demo Automation Report" > demo-report.md
        echo "" >> demo-report.md
        echo "**Timestamp:** $(date)" >> demo-report.md
        echo "**Commit:** ${{ github.sha }}" >> demo-report.md
        echo "**Workflow:** ${{ github.workflow }}" >> demo-report.md
        echo "" >> demo-report.md
        echo "## What Was Tested" >> demo-report.md
        echo "- PostgreSQL + Redis infrastructure" >> demo-report.md
        echo "- OPAQUE zero-knowledge registration" >> demo-report.md
        echo "- TOTP 2FA setup and verification" >> demo-report.md
        echo "- End-to-end user automation" >> demo-report.md
        echo "" >> demo-report.md
        echo "## Perfect for Hackathons!" >> demo-report.md
        echo "This proves the complex cryptographic flow works reliably." >> demo-report.md
        
        cat demo-report.md

    - name: Upload Demo Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypher-demo-report
        path: demo-report.md
        retention-days: 30
