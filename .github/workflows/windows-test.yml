name: Windows Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  windows-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: back-end/package.json
        
    - name: Install PostgreSQL
      run: |
        # Download and install PostgreSQL
        Write-Host "Installing PostgreSQL..."
        choco install postgresql15 --params '/Password:postgres' -y
        
        # Wait for installation to complete
        Start-Sleep -Seconds 30
        
        # Start PostgreSQL service
        Start-Service postgresql-x64-15
        
        # Configure PostgreSQL for proper authentication and IPv4 connections
        $env:PGPASSWORD = "postgres"
        
        # Create user and database
        & "C:\Program Files\PostgreSQL\15\bin\psql.exe" -U postgres -c "CREATE USER cypher_user WITH PASSWORD 'cypher_strong_password_123' CREATEDB SUPERUSER;"
        & "C:\Program Files\PostgreSQL\15\bin\createdb.exe" -U postgres -O cypher_user cypher_db
        
        # Update pg_hba.conf to allow password authentication for cypher_user
        $pgHbaPath = "C:\Program Files\PostgreSQL\15\data\pg_hba.conf"
        $pgHbaContent = Get-Content $pgHbaPath
        $newEntry = "host    all             cypher_user     127.0.0.1/32            md5"
        if ($pgHbaContent -notcontains $newEntry) {
            Add-Content $pgHbaPath $newEntry
        }
        
        # Also add IPv6 entry just in case
        $newEntryIPv6 = "host    all             cypher_user     ::1/128                 md5"
        if ($pgHbaContent -notcontains $newEntryIPv6) {
            Add-Content $pgHbaPath $newEntryIPv6
        }
        
        # Restart PostgreSQL to apply configuration changes
        Restart-Service postgresql-x64-15
        Start-Sleep -Seconds 5
        
        # Test connection with the cypher_user
        $env:PGPASSWORD = "cypher_strong_password_123"
        & "C:\Program Files\PostgreSQL\15\bin\psql.exe" -h 127.0.0.1 -U cypher_user -d cypher_db -c "SELECT 'Connection successful' as status;"
        
        Write-Host "✅ PostgreSQL installed and configured"
      shell: pwsh
      
    - name: Install Redis  
      run: |
        # Download and install Redis
        Write-Host "Installing Redis..."
        choco install redis-64 -y
        
        # Start Redis manually (redis-64 doesn't create a Windows service)
        Start-Process -FilePath "redis-server.exe" -WindowStyle Hidden
        Start-Sleep -Seconds 3
        
        # Verify Redis is running
        if (Test-NetConnection -ComputerName localhost -Port 6379 -InformationLevel Quiet) {
            Write-Host "✅ Redis started and accessible on port 6379"
        } else {
            Write-Host "❌ Redis failed to start"
            exit 1
        }
      shell: pwsh
      
    - name: Run Cypher Setup
      run: |
        cd back-end
        .\setup.ps1
      shell: pwsh
      
    - name: Verify Setup Success
      run: |
        cd back-end
        # Check if virtual environment was created
        if (!(Test-Path "venv\Scripts\activate.ps1") -and !(Test-Path "..\venv\Scripts\activate.ps1") -and !(Test-Path "..\cyvenv\Scripts\activate.ps1")) {
          Write-Error "Virtual environment not found"
          exit 1
        }
        
        # Check if .env file was created
        if (!(Test-Path ".env")) {
          Write-Error ".env file not created"
          exit 1
        }
        
        # Check if database services are accessible
        if (!(Test-NetConnection -ComputerName localhost -Port 5432 -InformationLevel Quiet)) {
          Write-Error "PostgreSQL not accessible on port 5432"
          exit 1
        }
        
        if (!(Test-NetConnection -ComputerName localhost -Port 6379 -InformationLevel Quiet)) {
          Write-Error "Redis not accessible on port 6379" 
          exit 1
        }
        
        Write-Host "✅ Database services accessible"
        
        Write-Host "✅ Setup verification passed"
      shell: pwsh
      
    - name: Test Application Startup
      run: |
        cd back-end
        
        # Since start.ps1 runs indefinitely, we'll test the startup components separately
        # Find and activate virtual environment
        $venvPaths = @(".\venv", "..\venv", "..\cyvenv", ".\cyvenv")
        $venvPath = ""
        foreach ($path in $venvPaths) {
            if ((Test-Path $path) -and (Test-Path "$path\Scripts\activate.ps1")) {
                $venvPath = $path
                break
            }
        }
        
        if ($venvPath -eq "") {
            Write-Error "Virtual environment not found"
            exit 1
        }
        
        # Activate virtual environment
        & "$venvPath\Scripts\Activate.ps1"
        
        # Test Python dependencies
        python -c "import flask, requests, redis, psycopg2" 2>$null
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Python dependencies test failed"
          exit 1
        }
        
        # Test Node.js dependencies
        cd node_internal_api
        node -e "console.log('Node.js dependencies OK')" 2>$null
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Node.js dependencies test failed"
          exit 1
        }
        cd ..
        
        Write-Host "✅ Application startup test passed"
      shell: pwsh
      
    - name: Run Application Tests (if any)
      run: |
        cd back-end
        
        # Activate virtual environment
        $venvPaths = @(".\venv", "..\venv", "..\cyvenv", ".\cyvenv")
        $venvPath = ""
        foreach ($path in $venvPaths) {
            if ((Test-Path $path) -and (Test-Path "$path\Scripts\activate.ps1")) {
                $venvPath = $path
                break
            }
        }
        & "$venvPath\Scripts\Activate.ps1"
        
        # Check if there are any test files and run them
        if (Test-Path "tests") {
          Write-Host "Running Python tests..."
          python -m pytest tests/ -v
        } elseif (Test-Path "test_*.py") {
          Write-Host "Running Python test files..."
          python -m pytest test_*.py -v
        } else {
          Write-Host "No test files found, skipping test execution"
        }
        
        # Check for Node.js tests
        cd node_internal_api
        if (Test-Path "package.json") {
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.test) {
            Write-Host "Running Node.js tests..."
            npm test
          }
        }
        cd ..
      shell: pwsh
      
    - name: Cleanup
      run: |
        cd back-end
        # Kill any remaining processes
        Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -eq "python"} | Stop-Process -Force -ErrorAction SilentlyContinue
        Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -eq "node"} | Stop-Process -Force -ErrorAction SilentlyContinue
        # Stop database services
        Stop-Service postgresql-x64-15 -ErrorAction SilentlyContinue
        Get-Process -Name "redis-server" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Write-Host "✅ Cleanup completed"
      shell: pwsh
      if: always()
