name: Windows Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  windows-test:
    runs-on: windows-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cypher_db
          POSTGRES_USER: cypher_user
          POSTGRES_PASSWORD: cypher_strong_password_123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: back-end/package.json
        
    - name: Wait for database services
      run: |
        Write-Host "Waiting for database services to be ready..."
        Start-Sleep -Seconds 10
        Write-Host "✅ Database services ready"
      shell: pwsh
      
    - name: Create modified setup script (skip Docker)
      run: |
        cd back-end
        # Create a version of setup.ps1 that skips Docker startup
        $setupContent = Get-Content "setup.ps1" -Raw
        $modifiedSetup = $setupContent -replace 'docker compose up -d postgres redis.*\n', 'Write-Host "Skipping Docker startup - using GitHub Actions services"`n'
        $modifiedSetup = $modifiedSetup -replace 'echo "starting database services\.\.\.".*\n', ''
        $modifiedSetup = $modifiedSetup -replace 'echo "waiting for databases to be ready\.\.\.".*\n', ''
        $modifiedSetup = $modifiedSetup -replace 'sleep 5.*\n', ''
        $modifiedSetup | Set-Content "setup_ci.ps1"
      shell: pwsh
      
    - name: Run Modified Cypher Setup
      run: |
        cd back-end
        .\setup_ci.ps1
      shell: pwsh
      
    - name: Verify Setup Success
      run: |
        cd back-end
        # Check if virtual environment was created
        if (!(Test-Path "venv\Scripts\activate.ps1") -and !(Test-Path "..\venv\Scripts\activate.ps1") -and !(Test-Path "..\cyvenv\Scripts\activate.ps1")) {
          Write-Error "Virtual environment not found"
          exit 1
        }
        
        # Check if .env file was created
        if (!(Test-Path ".env")) {
          Write-Error ".env file not created"
          exit 1
        }
        
        # Check if database services are accessible
        try {
          Test-NetConnection -ComputerName localhost -Port 5432 -InformationLevel Quiet | Out-Null
          Write-Host "✅ PostgreSQL service accessible"
        } catch {
          Write-Host "⚠️ PostgreSQL connectivity test failed"
        }
        
        try {
          Test-NetConnection -ComputerName localhost -Port 6379 -InformationLevel Quiet | Out-Null
          Write-Host "✅ Redis service accessible"
        } catch {
          Write-Host "⚠️ Redis connectivity test failed"
        }
        
        Write-Host "✅ Setup verification passed"
      shell: pwsh
      
    - name: Test Application Startup
      run: |
        cd back-end
        
        # Since start.ps1 runs indefinitely, we'll test the startup components separately
        # Find and activate virtual environment
        $venvPaths = @(".\venv", "..\venv", "..\cyvenv", ".\cyvenv")
        $venvPath = ""
        foreach ($path in $venvPaths) {
            if ((Test-Path $path) -and (Test-Path "$path\Scripts\activate.ps1")) {
                $venvPath = $path
                break
            }
        }
        
        if ($venvPath -eq "") {
            Write-Error "Virtual environment not found"
            exit 1
        }
        
        # Activate virtual environment
        & "$venvPath\Scripts\Activate.ps1"
        
        # Test Python dependencies
        python -c "import flask, requests, redis, psycopg2" 2>$null
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Python dependencies test failed"
          exit 1
        }
        
        # Test Node.js dependencies
        cd node_internal_api
        node -e "console.log('Node.js dependencies OK')" 2>$null
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Node.js dependencies test failed"
          exit 1
        }
        cd ..
        
        Write-Host "✅ Application startup test passed"
      shell: pwsh
      
    - name: Run Application Tests (if any)
      run: |
        cd back-end
        
        # Activate virtual environment
        $venvPaths = @(".\venv", "..\venv", "..\cyvenv", ".\cyvenv")
        $venvPath = ""
        foreach ($path in $venvPaths) {
            if ((Test-Path $path) -and (Test-Path "$path\Scripts\activate.ps1")) {
                $venvPath = $path
                break
            }
        }
        & "$venvPath\Scripts\Activate.ps1"
        
        # Check if there are any test files and run them
        if (Test-Path "tests") {
          Write-Host "Running Python tests..."
          python -m pytest tests/ -v
        } elseif (Test-Path "test_*.py") {
          Write-Host "Running Python test files..."
          python -m pytest test_*.py -v
        } else {
          Write-Host "No test files found, skipping test execution"
        }
        
        # Check for Node.js tests
        cd node_internal_api
        if (Test-Path "package.json") {
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.test) {
            Write-Host "Running Node.js tests..."
            npm test
          }
        }
        cd ..
      shell: pwsh
      
    - name: Cleanup
      run: |
        cd back-end
        # Kill any remaining processes
        Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -eq "python"} | Stop-Process -Force -ErrorAction SilentlyContinue
        Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -eq "node"} | Stop-Process -Force -ErrorAction SilentlyContinue
        # Remove temporary CI script
        Remove-Item "setup_ci.ps1" -ErrorAction SilentlyContinue
        Write-Host "✅ Cleanup completed"
      shell: pwsh
      if: always()
