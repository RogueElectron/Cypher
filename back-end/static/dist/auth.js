import{g as y,O as C,a as L,K as E}from"./opaque_client.js";const p=y(C.OPAQUE_P256);function u(e,o="success"){const r=document.getElementById("alert-container"),n=o==="success"?"alert-success":"alert-danger",a=o==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";r.innerHTML=`
        <div class="alert ${n} alert-dismissible fade show" role="alert">
            <i class="${a} me-2"></i>
            ${e}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,o==="success"&&setTimeout(()=>{const s=r.querySelector(".alert");s&&new bootstrap.Alert(s).close()},5e3)}function O(){const e=document.getElementById("alert-container");e.innerHTML=""}document.addEventListener("DOMContentLoaded",async()=>{const e=document.getElementById("login-form");e&&e.addEventListener("submit",async o=>{o.preventDefault(),O();const r=new FormData(e),n=r.get("username"),a=r.get("password");if(!n||!a){u("Please fill in all fields!","error");return}const s=e.querySelector('button[type="submit"]'),f=s.textContent;s.disabled=!0,s.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Logging in...';try{const t=new L(p),w=(await t.authInit(a)).serialize(),l=await fetch("http://localhost:3000/login/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,serke1:w})});if(!l.ok){const d=await l.json();throw new Error(d.error||"Login initialization failed")}const b=(await l.json()).ser_ke2,h=E.deserialize(p,b),m=await t.authFinish(h),k=m.ke3.serialize();console.log("session",m.session_key);const c=await fetch("http://localhost:3000/login/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,serke3:k})});if(!c.ok){const d=await c.json();throw new Error(d.error||"Login completion failed")}const g=await c.json();if(g.success)u(`ðŸŽ‰ Login successful! Welcome back, ${n}!`,"success"),e.reset(),setTimeout(()=>{window.location.href="/"},2e3);else throw new Error(g.message||"Invalid credentials")}catch(t){console.error("Login error:",t);let i=t.message;t.message.includes("client not registered")?i="User not found. Please register first.":t.message.includes("Authentication failed")&&(i="Invalid username or password."),u(`Login failed: ${i}`,"error")}finally{s.disabled=!1,s.textContent=f}})});
