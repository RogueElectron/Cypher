import{g as F,O as C,a as B,K as _}from"./opaque_client.js";const O="modulepreload",$=function(c){return"/"+c},L={},x=function(n,e,l){let u=Promise.resolve();if(e&&e.length>0){let f=function(s){return Promise.all(s.map(o=>Promise.resolve(o).then(p=>({status:"fulfilled",value:p}),p=>({status:"rejected",reason:p}))))};document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),a=r?.nonce||r?.getAttribute("nonce");u=f(e.map(s=>{if(s=$(s),s in L)return;L[s]=!0;const o=s.endsWith(".css"),p=o?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${s}"]${p}`))return;const d=document.createElement("link");if(d.rel=o?"stylesheet":O,o||(d.as="script"),d.crossOrigin="",d.href=s,a&&d.setAttribute("nonce",a),document.head.appendChild(d),o)return new Promise((b,v)=>{d.addEventListener("load",b),d.addEventListener("error",()=>v(new Error(`Unable to preload CSS for ${s}`)))})}))}function i(r){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=r,window.dispatchEvent(a),!a.defaultPrevented)throw r}return u.then(r=>{for(const a of r||[])a.status==="rejected"&&i(a.reason);return n().catch(i)})},T=F(C.OPAQUE_P256),M=[{id:"input",icon:"bi-keyboard",title:"Password Input",description:"Your password is entered locally and never transmitted",dataFlow:null},{id:"validation",icon:"bi-check-circle",title:"Input Validation",description:"Validating credentials before starting authentication",dataFlow:null},{id:"ke1-generation",icon:"bi-cpu",title:"Generate KE1",description:"Creating first key exchange message without exposing password",dataFlow:null},{id:"send-ke1",icon:"bi-arrow-up-circle",title:"Send Authentication Request",description:"Sending KE1 message to server (no password data included)",dataFlow:"KE1 Message → Server"},{id:"server-ke2",icon:"bi-server",title:"Server Response",description:"Server generates KE2 using stored encrypted credentials",dataFlow:"KE2 Message ← Server"},{id:"verify-server",icon:"bi-shield-check",title:"Verify Server",description:"Authenticating server and generating session key locally",dataFlow:null},{id:"send-ke3",icon:"bi-arrow-up-circle",title:"Send Authentication Proof",description:"Sending KE3 proof to complete mutual authentication",dataFlow:"KE3 Proof → Server"},{id:"totp-verify",icon:"bi-shield-lock",title:"2FA Verification",description:"Verifying time-based authentication code",dataFlow:null},{id:"success",icon:"bi-check-circle-fill",title:"Authentication Complete",description:"Successfully authenticated with 2FA!",dataFlow:null}];class D{constructor(){this.steps=M,this.init()}init(){this.renderSteps()}renderSteps(){const n=document.getElementById("live-steps");n&&(n.innerHTML=this.steps.map((e,l)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(n){const e=this.steps.findIndex(l=>l.id===n);this.steps.forEach((l,u)=>{const i=document.getElementById(`step-${l.id}`);i&&(i.className=i.className.replace(/\b(active|processing|completed)\b/g,"").trim(),u<e?i.classList.add("completed"):u===e&&i.classList.add("active"))})}completeStep(n){const e=document.getElementById(`step-${n}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(n,e="success"){const l=document.getElementById("security-status");if(l){const u=e==="success"?"bi-shield-check":"bi-shield-exclamation",i=e==="success"?"text-success":"text-warning";l.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${u} ${i} me-2"></i>
                    <span class="text-white">${n}</span>
                </div>
            `}}}let t,h=null;function j(){const c=document.getElementById("hide-sidebar"),n=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");c&&n&&e&&(c.addEventListener("click",()=>{e.classList.add("hidden"),n.style.display="block"}),n.addEventListener("click",()=>{e.classList.remove("hidden"),n.style.display="none"}))}function g(c,n="success"){const e=document.getElementById("alert-container"),l=n==="success"?"alert-success":"alert-danger",u=n==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${l} alert-dismissible fade show" role="alert">
            <i class="${u} me-2"></i>
            ${c}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,n==="success"&&setTimeout(()=>{const i=e.querySelector(".alert");i&&new bootstrap.Alert(i).close()},5e3)}function P(){const c=document.getElementById("alert-container");c.innerHTML=""}document.addEventListener("DOMContentLoaded",async()=>{t=new D,j();const c=document.getElementById("login-form");c&&c.addEventListener("submit",async l=>{l.preventDefault(),P(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const u=new FormData(c),i=u.get("username"),r=u.get("password");if(!i||!r){g("Please fill in all fields!","error");return}t.activateStep("validation"),await new Promise(s=>setTimeout(s,400)),t.completeStep("validation");const a=c.querySelector('button[type="submit"]'),f=a.textContent;a.disabled=!0,a.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Logging in...';try{t.activateStep("ke1-generation"),t.updateSecurityStatus("Generating key exchange message without exposing password"),await new Promise(m=>setTimeout(m,600));const s=new B(T),p=(await s.authInit(r)).serialize();t.completeStep("ke1-generation"),t.activateStep("send-ke1"),t.updateSecurityStatus("Sending authentication request - no password data transmitted");const d=await fetch("http://localhost:3000/login/init",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:i,serke1:p})});if(!d.ok){const m=await d.json();throw new Error(m.error||"Login initialization failed")}t.completeStep("send-ke1"),t.activateStep("server-ke2"),t.updateSecurityStatus("Server responding with encrypted challenge using stored credentials");const v=(await d.json()).ser_ke2,I=_.deserialize(T,v);t.completeStep("server-ke2"),t.activateStep("verify-server"),t.updateSecurityStatus("Verifying server authenticity and generating session key"),await new Promise(m=>setTimeout(m,500));const E=await s.authFinish(I),A=E.ke3.serialize();console.log("session",E.session_key),t.completeStep("verify-server"),t.activateStep("send-ke3"),t.updateSecurityStatus("Sending authentication proof to complete mutual authentication");const y=await fetch("http://localhost:3000/login/finish",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:i,serke3:A})});if(!y.ok){const m=await y.json();throw new Error(m.error||"Login completion failed")}const w=await y.json();if(w.success){if(h=w.token,!h)throw new Error("Password authentication token missing from response");t.completeStep("send-ke3"),t.activateStep("totp-verify"),t.updateSecurityStatus("OPAQUE authentication complete! Now verifying 2FA..."),console.log("Switching to TOTP phase...");const m=document.getElementById("login-form"),S=document.getElementById("totp-phase"),k=document.getElementById("back-link");console.log("Elements found:",{loginForm:m,totpPhase:S,backLink:k}),m&&(m.style.display="none"),S&&(S.style.display="block"),k&&(k.style.display="none"),g("Password authentication successful! Please enter your 2FA code.","success")}else throw new Error(w.message||"Invalid credentials")}catch(s){console.error("Login error:",s);let o=s.message;s.message.includes("client not registered")?o="User not found. Please register first.":s.message.includes("Authentication failed")&&(o="Invalid username or password."),g(`Login failed: ${o}`,"error")}finally{a.disabled=!1,a.textContent=f}});const n=document.getElementById("totp-verify-form");n&&n.addEventListener("submit",async l=>{l.preventDefault(),P();const i=new FormData(n).get("totp_code");if(!i||i.length!==6){g("Please enter a valid 6-digit code!","error");return}const r=n.querySelector('button[type="submit"]'),a=r.innerHTML;r.disabled=!0,r.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>verifying...';try{t.updateSecurityStatus("Verifying 2FA code...");const f=document.getElementById("username").value;if(!f)throw new Error("Username not found");if(!h)throw new Error("Password authentication token not found");const s=await fetch("http://localhost:3000/totp/verify-login",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:f,token:i,passAuthToken:h})}),o=await s.json();if(console.log("Login TOTP verification result:",o),!s.ok||!o.success){const p=o.error||"Invalid TOTP code";g(`Login failed: ${p}`,"error"),t.updateSecurityStatus("TOTP verification failed. Please try again.","error");return}if(t.completeStep("totp-verify"),t.updateSecurityStatus("Authentication complete! Session tokens created."),console.log("2FA verification result:",o),o.access_token&&o.refresh_token){console.log("Storing session tokens...");const{sessionManager:p}=await x(async()=>{const{sessionManager:d}=await import("./session-manager.js");return{sessionManager:d}},[]);p.setTokens(o.access_token,o.refresh_token,o.expires_in||900),console.log("Session tokens stored")}else console.warn("No session tokens received from server");g("Login successful! Welcome to Cypher.","success"),setTimeout(()=>{window.location.href="/"},1500)}finally{r.disabled=!1,r.innerHTML=a}});const e=document.getElementById("totp-code");e&&e.addEventListener("input",()=>{e.value=e.value.replace(/[^0-9]/g,""),e.value.length>6&&(e.value=e.value.slice(0,6))})});
