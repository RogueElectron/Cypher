import{g as b,O as k,a as E,K as L}from"./opaque_client.js";const h=b(k.OPAQUE_P256),I=[{id:"input",icon:"bi-keyboard",title:"Password Input",description:"Your password is entered locally and never transmitted",dataFlow:null},{id:"validation",icon:"bi-check-circle",title:"Input Validation",description:"Validating credentials before starting authentication",dataFlow:null},{id:"ke1-generation",icon:"bi-cpu",title:"Generate KE1",description:"Creating first key exchange message without exposing password",dataFlow:null},{id:"send-ke1",icon:"bi-arrow-up-circle",title:"Send Authentication Request",description:"Sending KE1 message to server (no password data included)",dataFlow:"KE1 Message → Server"},{id:"server-ke2",icon:"bi-server",title:"Server Response",description:"Server generates KE2 using stored encrypted credentials",dataFlow:"KE2 Message ← Server"},{id:"verify-server",icon:"bi-shield-check",title:"Verify Server",description:"Authenticating server and generating session key locally",dataFlow:null},{id:"send-ke3",icon:"bi-arrow-up-circle",title:"Send Authentication Proof",description:"Sending KE3 proof to complete mutual authentication",dataFlow:"KE3 Proof → Server"},{id:"success",icon:"bi-check-circle-fill",title:"Authentication Complete",description:"Successfully authenticated! Session established securely.",dataFlow:null}];class x{constructor(){this.currentStep=0,this.steps=I,this.init()}init(){this.renderSteps()}renderSteps(){const s=document.getElementById("live-steps");s&&(s.innerHTML=this.steps.map((e,n)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(s){const e=this.steps.findIndex(n=>n.id===s);this.steps.forEach((n,o)=>{const i=document.getElementById(`step-${n.id}`);i&&(i.className=i.className.replace(/\b(active|processing|completed)\b/g,"").trim(),o<e?i.classList.add("completed"):o===e&&i.classList.add("active"))})}setProcessing(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active"),e.classList.add("processing"))}completeStep(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(s,e="success"){const n=document.getElementById("security-status");if(n){const o=e==="success"?"bi-shield-check":"bi-shield-exclamation",i=e==="success"?"text-success":"text-warning";n.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${o} ${i} me-2"></i>
                    <span class="text-white">${s}</span>
                </div>
            `}}}let t;function $(){const a=document.getElementById("hide-sidebar"),s=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");a&&s&&e&&(a.addEventListener("click",()=>{e.classList.add("hidden"),s.style.display="block"}),s.addEventListener("click",()=>{e.classList.remove("hidden"),s.style.display="none"}))}function p(a,s="success"){const e=document.getElementById("alert-container"),n=s==="success"?"alert-success":"alert-danger",o=s==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${n} alert-dismissible fade show" role="alert">
            <i class="${o} me-2"></i>
            ${a}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,s==="success"&&setTimeout(()=>{const i=e.querySelector(".alert");i&&new bootstrap.Alert(i).close()},5e3)}function C(){const a=document.getElementById("alert-container");a.innerHTML=""}document.addEventListener("DOMContentLoaded",async()=>{t=new x,$();const a=document.getElementById("login-form");a&&a.addEventListener("submit",async s=>{s.preventDefault(),C(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const e=new FormData(a),n=e.get("username"),o=e.get("password");if(!n||!o){p("Please fill in all fields!","error");return}t.activateStep("validation"),await new Promise(r=>setTimeout(r,400)),t.completeStep("validation");const i=a.querySelector('button[type="submit"]'),m=i.textContent;i.disabled=!0,i.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Logging in...';try{t.activateStep("ke1-generation"),t.updateSecurityStatus("Generating key exchange message without exposing password"),await new Promise(c=>setTimeout(c,600));const r=new E(h),f=(await r.authInit(o)).serialize();t.completeStep("ke1-generation"),t.activateStep("send-ke1"),t.updateSecurityStatus("Sending authentication request - no password data transmitted");const d=await fetch("http://localhost:3000/login/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,serke1:f})});if(!d.ok){const c=await d.json();throw new Error(c.error||"Login initialization failed")}t.completeStep("send-ke1"),t.activateStep("server-ke2"),t.updateSecurityStatus("Server responding with encrypted challenge using stored credentials");const S=(await d.json()).ser_ke2,w=L.deserialize(h,S);t.completeStep("server-ke2"),t.activateStep("verify-server"),t.updateSecurityStatus("Verifying server authenticity and generating session key"),await new Promise(c=>setTimeout(c,500));const g=await r.authFinish(w),y=g.ke3.serialize();console.log("session",g.session_key),t.completeStep("verify-server"),t.activateStep("send-ke3"),t.updateSecurityStatus("Sending authentication proof to complete mutual authentication");const u=await fetch("http://localhost:3000/login/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,serke3:y})});if(!u.ok){const c=await u.json();throw new Error(c.error||"Login completion failed")}const v=await u.json();if(v.success)t.completeStep("send-ke3"),t.activateStep("success"),t.updateSecurityStatus("Authentication complete! Session established securely without password exposure."),p(`Login successful! Welcome back, ${n}!`,"success"),a.reset();else throw new Error(v.message||"Invalid credentials")}catch(r){console.error("Login error:",r);let l=r.message;r.message.includes("client not registered")?l="User not found. Please register first.":r.message.includes("Authentication failed")&&(l="Invalid username or password."),p(`Login failed: ${l}`,"error")}finally{i.disabled=!1,i.textContent=m}})});
