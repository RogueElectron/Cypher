import{g as P,O as F,a as A,K as B}from"./opaque_client.js";const b=P(F.OPAQUE_P256),C=[{id:"input",icon:"bi-keyboard",title:"Password Input",description:"Your password is entered locally and never transmitted",dataFlow:null},{id:"validation",icon:"bi-check-circle",title:"Input Validation",description:"Validating credentials before starting authentication",dataFlow:null},{id:"ke1-generation",icon:"bi-cpu",title:"Generate KE1",description:"Creating first key exchange message without exposing password",dataFlow:null},{id:"send-ke1",icon:"bi-arrow-up-circle",title:"Send Authentication Request",description:"Sending KE1 message to server (no password data included)",dataFlow:"KE1 Message → Server"},{id:"server-ke2",icon:"bi-server",title:"Server Response",description:"Server generates KE2 using stored encrypted credentials",dataFlow:"KE2 Message ← Server"},{id:"verify-server",icon:"bi-shield-check",title:"Verify Server",description:"Authenticating server and generating session key locally",dataFlow:null},{id:"send-ke3",icon:"bi-arrow-up-circle",title:"Send Authentication Proof",description:"Sending KE3 proof to complete mutual authentication",dataFlow:"KE3 Proof → Server"},{id:"totp-verify",icon:"bi-shield-lock",title:"2FA Verification",description:"Verifying time-based authentication code",dataFlow:null},{id:"success",icon:"bi-check-circle-fill",title:"Authentication Complete",description:"Successfully authenticated with 2FA!",dataFlow:null}];class x{constructor(){this.steps=C,this.init()}init(){this.renderSteps()}renderSteps(){const i=document.getElementById("live-steps");i&&(i.innerHTML=this.steps.map((e,n)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(i){const e=this.steps.findIndex(n=>n.id===i);this.steps.forEach((n,c)=>{const s=document.getElementById(`step-${n.id}`);s&&(s.className=s.className.replace(/\b(active|processing|completed)\b/g,"").trim(),c<e?s.classList.add("completed"):c===e&&s.classList.add("active"))})}completeStep(i){const e=document.getElementById(`step-${i}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(i,e="success"){const n=document.getElementById("security-status");if(n){const c=e==="success"?"bi-shield-check":"bi-shield-exclamation",s=e==="success"?"text-success":"text-warning";n.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${c} ${s} me-2"></i>
                    <span class="text-white">${i}</span>
                </div>
            `}}}let t,g=null;function O(){const o=document.getElementById("hide-sidebar"),i=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");o&&i&&e&&(o.addEventListener("click",()=>{e.classList.add("hidden"),i.style.display="block"}),i.addEventListener("click",()=>{e.classList.remove("hidden"),i.style.display="none"}))}function m(o,i="success"){const e=document.getElementById("alert-container"),n=i==="success"?"alert-success":"alert-danger",c=i==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${n} alert-dismissible fade show" role="alert">
            <i class="${c} me-2"></i>
            ${o}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,i==="success"&&setTimeout(()=>{const s=e.querySelector(".alert");s&&new bootstrap.Alert(s).close()},5e3)}function k(){const o=document.getElementById("alert-container");o.innerHTML=""}document.addEventListener("DOMContentLoaded",async()=>{t=new x,O();const o=document.getElementById("login-form");o&&o.addEventListener("submit",async n=>{n.preventDefault(),k(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const c=new FormData(o),s=c.get("username"),l=c.get("password");if(!s||!l){m("Please fill in all fields!","error");return}t.activateStep("validation"),await new Promise(a=>setTimeout(a,400)),t.completeStep("validation");const u=o.querySelector('button[type="submit"]'),p=u.textContent;u.disabled=!0,u.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Logging in...';try{t.activateStep("ke1-generation"),t.updateSecurityStatus("Generating key exchange message without exposing password"),await new Promise(r=>setTimeout(r,600));const a=new A(b),E=(await a.authInit(l)).serialize();t.completeStep("ke1-generation"),t.activateStep("send-ke1"),t.updateSecurityStatus("Sending authentication request - no password data transmitted");const f=await fetch("http://localhost:3000/login/init",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:s,serke1:E})});if(!f.ok){const r=await f.json();throw new Error(r.error||"Login initialization failed")}t.completeStep("send-ke1"),t.activateStep("server-ke2"),t.updateSecurityStatus("Server responding with encrypted challenge using stored credentials");const L=(await f.json()).ser_ke2,T=B.deserialize(b,L);t.completeStep("server-ke2"),t.activateStep("verify-server"),t.updateSecurityStatus("Verifying server authenticity and generating session key"),await new Promise(r=>setTimeout(r,500));const S=await a.authFinish(T),I=S.ke3.serialize();console.log("session",S.session_key),t.completeStep("verify-server"),t.activateStep("send-ke3"),t.updateSecurityStatus("Sending authentication proof to complete mutual authentication");const v=await fetch("http://localhost:3000/login/finish",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:s,serke3:I})});if(!v.ok){const r=await v.json();throw new Error(r.error||"Login completion failed")}const h=await v.json();if(h.success){if(g=h.token,!g)throw new Error("Password authentication token missing from response");t.completeStep("send-ke3"),t.activateStep("totp-verify"),t.updateSecurityStatus("OPAQUE authentication complete! Now verifying 2FA..."),console.log("Switching to TOTP phase...");const r=document.getElementById("login-form"),y=document.getElementById("totp-phase"),w=document.getElementById("back-link");console.log("Elements found:",{loginForm:r,totpPhase:y,backLink:w}),r&&(r.style.display="none"),y&&(y.style.display="block"),w&&(w.style.display="none"),m("Password authentication successful! Please enter your 2FA code.","success")}else throw new Error(h.message||"Invalid credentials")}catch(a){console.error("Login error:",a);let d=a.message;a.message.includes("client not registered")?d="User not found. Please register first.":a.message.includes("Authentication failed")&&(d="Invalid username or password."),m(`Login failed: ${d}`,"error")}finally{u.disabled=!1,u.textContent=p}});const i=document.getElementById("totp-verify-form");i&&i.addEventListener("submit",async n=>{n.preventDefault(),k();const s=new FormData(i).get("totp_code");if(!s||s.length!==6){m("Please enter a valid 6-digit code!","error");return}const l=i.querySelector('button[type="submit"]'),u=l.innerHTML;l.disabled=!0,l.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>verifying...';try{t.updateSecurityStatus("Verifying 2FA code...");const p=document.getElementById("username").value;if(!p)throw new Error("Username not found");if(!g)throw new Error("Password authentication token not found");const a=await fetch("http://localhost:3000/totp/verify-login",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({username:p,token:s,passAuthToken:g})}),d=await a.json();if(console.log("Login TOTP verification result:",d),!a.ok||!d.success)throw new Error(d.error||"Invalid TOTP code");t.activateStep("success"),t.updateSecurityStatus("Login complete! Session established with 2FA verification."),m("Login successful! Welcome back!","success"),setTimeout(()=>{window.location.href="/"},2e3)}catch(p){console.error("TOTP verification error:",p),m(`2FA verification failed: ${p.message||"Invalid code"}`,"error")}finally{l.disabled=!1,l.innerHTML=u}});const e=document.getElementById("totp-code");e&&e.addEventListener("input",()=>{e.value=e.value.replace(/[^0-9]/g,""),e.value.length>6&&(e.value=e.value.slice(0,6))})});
