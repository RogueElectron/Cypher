class n{constructor(){this.accessToken=null,this.refreshToken=null,this.refreshTimeout=null,this.isRefreshing=!1,this.refreshPromise=null}setCookie(e,s,r){const t=location.protocol==="https:"?"; Secure":"",o=`${e}=${s}; Max-Age=${r}; SameSite=Lax; Path=/${t}`;document.cookie=o,console.log("Setting cookie:",o)}getCookie(e){const r=`; ${document.cookie}`.split(`; ${e}=`);return r.length===2?r.pop().split(";").shift():null}deleteCookie(e){document.cookie=`${e}=; Max-Age=0; Path=/; SameSite=Lax`}setTokens(e,s,r){console.log("setTokens called with:",{accessToken:e?"present":"missing",refreshToken:s?"present":"missing",expiresIn:r}),this.accessToken=e,this.refreshToken=s,this.setCookie("access_token",e,r),this.setCookie("refresh_token",s,2592e3),r>60&&this.scheduleRefresh(r-60),console.log("Session tokens stored in cookies and refresh scheduled"),setTimeout(()=>{console.log("Verifying cookies set:",{access_token:this.getCookie("access_token")?"present":"missing",refresh_token:this.getCookie("refresh_token")?"present":"missing"})},100)}loadTokens(){return this.accessToken=this.getCookie("access_token"),this.refreshToken=this.getCookie("refresh_token"),this.accessToken&&this.refreshToken&&this.verifyToken().catch(()=>{this.refreshTokens()}),this.hasValidSession()}hasValidSession(){return!!(this.accessToken&&this.refreshToken)}getAccessToken(){return this.accessToken}scheduleRefresh(e){this.refreshTimeout&&clearTimeout(this.refreshTimeout),this.refreshTimeout=setTimeout(()=>{this.refreshTokens()},e*1e3)}async refreshTokens(){if(this.isRefreshing)return this.refreshPromise;if(!this.refreshToken)throw new Error("No refresh token available");this.isRefreshing=!0,this.refreshPromise=this._performRefresh();try{return await this.refreshPromise}finally{this.isRefreshing=!1,this.refreshPromise=null}}async _performRefresh(){try{const e=await fetch("/api/refresh-token",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({refresh_token:this.refreshToken})});if(!e.ok)throw new Error("Token refresh failed");const s=await e.json();if(s.success)return this.setTokens(s.access_token,s.refresh_token,s.expires_in),console.log("Tokens refreshed successfully"),s;throw new Error(s.error||"Token refresh failed")}catch(e){throw console.error("Token refresh error:",e),this.clearSession(),e}}async verifyToken(){if(!this.accessToken)throw new Error("No access token");const s=await(await fetch("/api/verify-access",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({access_token:this.accessToken})})).json();if(!s.valid)throw new Error(s.error||"Token invalid");return s}async authenticatedFetch(e,s={}){if(!this.accessToken)throw new Error("No access token - user not authenticated");const r={...s,headers:{...s.headers,Authorization:`Bearer ${this.accessToken}`}};try{const t=await fetch(e,r);return t.status===401?(await this.refreshTokens(),r.headers.Authorization=`Bearer ${this.accessToken}`,fetch(e,r)):t}catch(t){throw console.error("Authenticated fetch error:",t),t}}async logout(){try{await fetch("/api/logout",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({access_token:this.accessToken,refresh_token:this.refreshToken})})}catch(e){console.error("Logout error:",e)}finally{this.clearSession()}}clearSession(){this.accessToken=null,this.refreshToken=null,this.deleteCookie("access_token"),this.deleteCookie("refresh_token"),this.refreshTimeout&&(clearTimeout(this.refreshTimeout),this.refreshTimeout=null),console.log("Session cleared")}async getCurrentUser(){if(!this.accessToken)return null;try{const e=await this.verifyToken();return{username:e.username,sessionId:e.session_id}}catch(e){return console.error("Error getting current user:",e),null}}}const i=new n;document.addEventListener("DOMContentLoaded",()=>{i.loadTokens()});export{n as SessionManager,i as sessionManager};
