class i{constructor(){this.accessToken=null,this.refreshToken=null,this.refreshTimeout=null,this.isRefreshing=!1,this.refreshPromise=null}setCookie(e,s,t){const r=location.protocol==="https:"?"; Secure":"",o=`${e}=${s}; Max-Age=${t}; SameSite=Lax; Path=/${r}`;document.cookie=o}getCookie(e){const t=`; ${document.cookie}`.split(`; ${e}=`);return t.length===2?t.pop().split(";").shift():null}deleteCookie(e){document.cookie=`${e}=; Max-Age=0; Path=/; SameSite=Lax`}setTokens(e,s,t){this.accessToken=e,this.refreshToken=s,this.setCookie("access_token",e,t),this.setCookie("refresh_token",s,2592e3),t>60&&this.scheduleRefresh(t-60)}loadTokens(){return this.accessToken=this.getCookie("access_token"),this.refreshToken=this.getCookie("refresh_token"),this.accessToken&&this.refreshToken&&this.verifyToken().catch(()=>{this.refreshTokens()}),this.hasValidSession()}hasValidSession(){return!!(this.accessToken&&this.refreshToken)}getAccessToken(){return this.accessToken}scheduleRefresh(e){this.refreshTimeout&&clearTimeout(this.refreshTimeout),this.refreshTimeout=setTimeout(()=>{this.refreshTokens()},e*1e3)}async refreshTokens(){if(this.isRefreshing)return this.refreshPromise;if(!this.refreshToken)throw new Error("No refresh token available");this.isRefreshing=!0,this.refreshPromise=this._performRefresh();try{return await this.refreshPromise}finally{this.isRefreshing=!1,this.refreshPromise=null}}async _performRefresh(){try{const e=await fetch("/api/refresh-token",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({refresh_token:this.refreshToken})});if(!e.ok)throw new Error("Token refresh failed");const s=await e.json();if(s.success)return this.setTokens(s.access_token,s.refresh_token,s.expires_in),s;throw new Error(s.error||"Token refresh failed")}catch(e){throw this.clearSession(),e}}async verifyToken(){if(!this.accessToken)throw new Error("No access token");const s=await(await fetch("/api/verify-access",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({access_token:this.accessToken})})).json();if(!s.valid)throw new Error(s.error||"Token invalid");return s}async authenticatedFetch(e,s={}){if(!this.accessToken)throw new Error("No access token - user not authenticated");const t={...s,headers:{...s.headers,Authorization:`Bearer ${this.accessToken}`}};try{const r=await fetch(e,t);return r.status===401?(await this.refreshTokens(),t.headers.Authorization=`Bearer ${this.accessToken}`,fetch(e,t)):r}catch(r){throw r}}async logout(){try{await fetch("/api/logout",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({access_token:this.accessToken,refresh_token:this.refreshToken})})}finally{this.clearSession()}}clearSession(){this.accessToken=null,this.refreshToken=null,this.deleteCookie("access_token"),this.deleteCookie("refresh_token"),this.refreshTimeout&&(clearTimeout(this.refreshTimeout),this.refreshTimeout=null)}async getCurrentUser(){if(!this.accessToken)return null;try{const e=await this.verifyToken();return{username:e.username,sessionId:e.session_id}}catch{return null}}}const n=new i;document.addEventListener("DOMContentLoaded",()=>{n.loadTokens()});export{i as SessionManager,n as sessionManager};
