import{g as P,O as C,a as I,R as O}from"./opaque_client.js";const w=P(C.OPAQUE_P256),R=[{id:"input",title:"password input",description:"entering credentials locally",icon:"1"},{id:"validation",title:"input validation",description:"checking password strength",icon:"2"},{id:"generate-keys",title:"generate keys",description:"creating cryptographic keypair",icon:"3"},{id:"registration-request",title:"registration request",description:"sending RegistrationRequest to server",icon:"4"},{id:"server-response",title:"server response",description:"receiving RegistrationResponse",icon:"5"},{id:"finalize",title:"finalize registration",description:"completing OPAQUE protocol",icon:"6"},{id:"totp-setup",title:"2fa setup",description:"configuring time-based authentication",icon:"7"},{id:"totp-verify",title:"verify 2fa",description:"confirming totp code works",icon:"8"},{id:"success",icon:"âœ“",title:"registration complete",description:"account created with 2fa enabled",dataFlow:null}];class L{constructor(){this.currentStep=0,this.steps=R,this.init()}init(){this.renderSteps()}renderSteps(){const s=document.getElementById("live-steps");s&&(s.innerHTML=this.steps.map((e,l)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(s){const e=this.steps.findIndex(l=>l.id===s);this.steps.forEach((l,d)=>{const i=document.getElementById(`step-${l.id}`);i&&(i.className=i.className.replace(/\b(active|processing|completed)\b/g,"").trim(),d<e?i.classList.add("completed"):d===e&&i.classList.add("active"))})}setProcessing(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active"),e.classList.add("processing"))}completeStep(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(s,e="success"){const l=document.getElementById("security-status");if(l){const d=e==="success"?"bi-shield-check":"bi-shield-exclamation",i=e==="success"?"text-success":"text-warning";l.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${d} ${i} me-2"></i>
                    <span class="text-white">${s}</span>
                </div>
            `}}}let t;function B(){const o=document.getElementById("hide-sidebar"),s=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");o&&s&&e&&(o.addEventListener("click",()=>{e.classList.add("hidden"),s.style.display="block"}),s.addEventListener("click",()=>{e.classList.remove("hidden"),s.style.display="none"}))}function g(o,s="success"){const e=document.getElementById("alert-container"),l=s==="success"?"alert-success":"alert-danger",d=s==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${l} alert-dismissible fade show" role="alert">
            <i class="${d} me-2"></i>
            ${o}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,s==="success"&&setTimeout(()=>{const i=e.querySelector(".alert");i&&new bootstrap.Alert(i).close()},5e3)}function S(){const o=document.getElementById("alert-container");o.innerHTML=""}function k(o,s){return o!==s?(g("Passwords do not match!","error"),!1):o.length<8?(g("Password must be at least 8 characters long!","error"),!1):!0}document.addEventListener("DOMContentLoaded",async()=>{t=new L,B();const o=document.getElementById("register-form");o&&o.addEventListener("submit",async r=>{r.preventDefault(),S(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const c=new FormData(o),n=c.get("username"),p=c.get("password"),u=c.get("confirm_password");if(!n||!p||!u){g("Please fill in all fields!","error");return}if(t.activateStep("validation"),await new Promise(m=>setTimeout(m,500)),!k(p,u))return;t.completeStep("validation");const a=o.querySelector('button[type="submit"]'),y=a.textContent;a.disabled=!0,a.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Registering...';try{t.activateStep("oprf-init"),t.updateSecurityStatus("Generating cryptographic blinding - your password stays secure"),await new Promise(f=>setTimeout(f,800));const m=new I(w),b=(await m.registerInit(p)).serialize();t.completeStep("oprf-init"),t.activateStep("send-request"),t.updateSecurityStatus("Sending blinded password to server - original password never leaves this device");const v=await fetch("http://localhost:3000/register/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,registrationRequest:b})});if(!v.ok){const f=await v.json();throw new Error(f.error||"Registration failed")}t.completeStep("send-request"),t.activateStep("server-processing"),t.updateSecurityStatus("Server processing blinded password - your actual password remains unknown");const{registrationResponse:T}=await v.json(),E=O.deserialize(w,T);t.completeStep("server-processing"),t.activateStep("credential-generation"),t.updateSecurityStatus("Creating your secure credential file locally"),await new Promise(f=>setTimeout(f,600));const x=(await m.registerFinish(E)).record.serialize();t.completeStep("credential-generation"),t.activateStep("final-registration"),t.updateSecurityStatus("Sending encrypted credential to server for storage");const h=await fetch("http://localhost:3000/register/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,record:x})});if(!h.ok){const f=await h.json();throw new Error(f.error||"Registration completion failed")}if((await h.json()).success)t.completeStep("final-registration"),t.activateStep("totp-setup"),t.updateSecurityStatus("OPAQUE registration complete! Now setting up 2FA..."),document.getElementById("register-form").parentElement.style.display="none",document.getElementById("totp-phase").style.display="block",document.getElementById("back-link").style.display="none",s(),g("OPAQUE registration successful! Please set up 2FA to complete registration.","success");else throw new Error("Registration failed - please try again")}catch(m){console.error("Registration error:",m),g(`Registration failed: ${m.message}`,"error")}finally{a.disabled=!1,a.textContent=y}});async function s(){try{const r=document.getElementById("username").value,c=await fetch("http://localhost:3000/totp/setup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:r})});if(!c.ok)throw new Error("Failed to setup TOTP");const n=await c.json();return document.getElementById("totp-secret").textContent=n.secret,window.currentTotpSecret=n.secret,window.currentUsername=r,e(n.qrCode,n.otpauthUrl),l(n.secret),n.secret}catch(r){throw console.error("TOTP setup error:",r),g(`TOTP setup failed: ${r.message}`,"error"),r}}function e(r,c){const n=document.getElementById("qr-code");n.innerHTML=`
            <div class="text-center p-4" style="background: rgba(255,255,255,0.1); border-radius: 8px;">
                <div class="mb-3">
                    <img src="${r}" alt="TOTP QR Code" style="border-radius: 8px; max-width: 200px; max-height: 200px;">
                </div>
                <small class="text-secondary">scan with google authenticator, authy, or similar app</small>
                <div class="mt-2">
                    <small class="text-muted">or copy this URI:</small>
                    <div class="mt-1">
                        <input type="text" class="form-control form-control-sm" value="${c}" readonly onclick="this.select()" style="font-size: 10px;">
                    </div>
                </div>
            </div>
        `}function l(r){const c=new jsOTP.totp,n=c.getOtp(r),p=document.getElementById("qr-code"),u=document.createElement("div");u.className="mt-3 p-2 rounded",u.style.background="rgba(245, 87, 108, 0.1)",u.style.border="1px solid rgba(245, 87, 108, 0.2)",u.innerHTML=`
            <small class="text-warning"><i class="bi bi-exclamation-triangle me-1"></i>testing only:</small><br>
            <span class="text-white">current totp code: <strong>${n}</strong></span><br>
            <small class="text-secondary">refreshes every 30 seconds</small>
        `,p.appendChild(u),setInterval(()=>{const a=c.getOtp(r);u.querySelector("strong").textContent=a},3e4)}const d=document.getElementById("totp-verify-form");d&&d.addEventListener("submit",async r=>{r.preventDefault(),S();const n=new FormData(d).get("totp_code");if(!n||n.length!==6){g("Please enter a valid 6-digit code!","error");return}const p=d.querySelector('button[type="submit"]'),u=p.innerHTML;p.disabled=!0,p.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>verifying...';try{t.activateStep("totp-verify"),t.updateSecurityStatus("Verifying 2FA code...");const a=window.currentUsername;if(!a)throw new Error("Username not found");const y=await fetch("http://localhost:3000/totp/verify-setup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:a,token:n})}),m=await y.json();if(console.log("TOTP verification result:",m),!y.ok||!m.success)throw new Error(m.error||"Invalid TOTP code");t.activateStep("success"),t.updateSecurityStatus("Registration complete! Account secured with 2FA."),g("Registration complete! You can now log in with your credentials and 2FA.","success"),console.log("TOTP secret to store:",secret),setTimeout(()=>{window.location.href="/api/login"},2e3)}catch(a){console.error("TOTP verification error:",a),g(`2FA verification failed: ${a.message||"Invalid code"}`,"error")}finally{p.disabled=!1,p.innerHTML=u}});const i=document.getElementById("totp-code");i&&i.addEventListener("input",()=>{i.value=i.value.replace(/[^0-9]/g,""),i.value.length>6&&(i.value=i.value.slice(0,6))})});
