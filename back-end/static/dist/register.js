import{g as y,O as S,a as b,R}from"./opaque_client.js";const m=y(S.OPAQUE_P256),E=[{id:"input",icon:"bi-keyboard",title:"Password Input",description:"Your password is entered locally and never transmitted in plaintext",dataFlow:null},{id:"validation",icon:"bi-check-circle",title:"Input Validation",description:"Checking password strength and confirmation match",dataFlow:null},{id:"oprf-init",icon:"bi-cpu",title:"OPRF Initialization",description:"Generating cryptographic blinding for your password",dataFlow:null},{id:"send-request",icon:"bi-arrow-up-circle",title:"Send Registration Request",description:"Sending blinded password to server (original password stays here)",dataFlow:"Blinded Password → Server"},{id:"server-processing",icon:"bi-server",title:"Server Processing",description:"Server processes blinded password without seeing your actual password",dataFlow:"Server Response ← Server"},{id:"credential-generation",icon:"bi-key",title:"Credential Generation",description:"Creating your secure credential file locally",dataFlow:null},{id:"final-registration",icon:"bi-shield-check",title:"Complete Registration",description:"Sending encrypted credential to server for storage",dataFlow:"Encrypted Credential → Server"},{id:"success",icon:"bi-check-circle-fill",title:"Registration Complete",description:"Account created successfully! Your password never left this device.",dataFlow:null}];class C{constructor(){this.currentStep=0,this.steps=E,this.init()}init(){this.renderSteps()}renderSteps(){const t=document.getElementById("live-steps");t&&(t.innerHTML=this.steps.map((e,n)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(t){const e=this.steps.findIndex(n=>n.id===t);this.steps.forEach((n,a)=>{const r=document.getElementById(`step-${n.id}`);r&&(r.className=r.className.replace(/\b(active|processing|completed)\b/g,"").trim(),a<e?r.classList.add("completed"):a===e&&r.classList.add("active"))})}setProcessing(t){const e=document.getElementById(`step-${t}`);e&&(e.classList.remove("active"),e.classList.add("processing"))}completeStep(t){const e=document.getElementById(`step-${t}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(t,e="success"){const n=document.getElementById("security-status");if(n){const a=e==="success"?"bi-shield-check":"bi-shield-exclamation",r=e==="success"?"text-success":"text-warning";n.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${a} ${r} me-2"></i>
                    <span class="text-white">${t}</span>
                </div>
            `}}}let s;function L(){const i=document.getElementById("hide-sidebar"),t=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");i&&t&&e&&(i.addEventListener("click",()=>{e.classList.add("hidden"),t.style.display="block"}),t.addEventListener("click",()=>{e.classList.remove("hidden"),t.style.display="none"}))}function d(i,t="success"){const e=document.getElementById("alert-container"),n=t==="success"?"alert-success":"alert-danger",a=t==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${n} alert-dismissible fade show" role="alert">
            <i class="${a} me-2"></i>
            ${i}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,t==="success"&&setTimeout(()=>{const r=e.querySelector(".alert");r&&new bootstrap.Alert(r).close()},5e3)}function I(){const i=document.getElementById("alert-container");i.innerHTML=""}function P(i,t){return i!==t?(d("Passwords do not match!","error"),!1):i.length<8?(d("Password must be at least 8 characters long!","error"),!1):!0}document.addEventListener("DOMContentLoaded",async()=>{s=new C,L();const i=document.getElementById("register-form");i&&i.addEventListener("submit",async t=>{t.preventDefault(),I(),s.activateStep("input"),s.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const e=new FormData(i),n=e.get("username"),a=e.get("password"),r=e.get("confirm_password");if(!n||!a||!r){d("Please fill in all fields!","error");return}if(s.activateStep("validation"),await new Promise(o=>setTimeout(o,500)),!P(a,r))return;s.completeStep("validation");const l=i.querySelector('button[type="submit"]'),g=l.textContent;l.disabled=!0,l.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Registering...';try{s.activateStep("oprf-init"),s.updateSecurityStatus("Generating cryptographic blinding - your password stays secure"),await new Promise(c=>setTimeout(c,800));const o=new b(m),f=(await o.registerInit(a)).serialize();s.completeStep("oprf-init"),s.activateStep("send-request"),s.updateSecurityStatus("Sending blinded password to server - original password never leaves this device");const u=await fetch("http://localhost:3000/register/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,registrationRequest:f})});if(!u.ok){const c=await u.json();throw new Error(c.error||"Registration failed")}s.completeStep("send-request"),s.activateStep("server-processing"),s.updateSecurityStatus("Server processing blinded password - your actual password remains unknown");const{registrationResponse:v}=await u.json(),w=R.deserialize(m,v);s.completeStep("server-processing"),s.activateStep("credential-generation"),s.updateSecurityStatus("Creating your secure credential file locally"),await new Promise(c=>setTimeout(c,600));const h=(await o.registerFinish(w)).record.serialize();s.completeStep("credential-generation"),s.activateStep("final-registration"),s.updateSecurityStatus("Sending encrypted credential to server for storage");const p=await fetch("http://localhost:3000/register/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:n,record:h})});if(!p.ok){const c=await p.json();throw new Error(c.error||"Registration completion failed")}if((await p.json()).success)s.completeStep("final-registration"),s.activateStep("success"),s.updateSecurityStatus("Registration complete! Your password never left this device and remains secure."),d(`Registration successful! Welcome, ${n}! You can now log in with your credentials.`,"success"),i.reset();else throw new Error("Registration failed - please try again")}catch(o){console.error("Registration error:",o),d(`Registration failed: ${o.message}`,"error")}finally{l.disabled=!1,l.textContent=g}})});
