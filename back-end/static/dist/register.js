import{g as I,O as P,a as R,R as O}from"./opaque_client.js";const w=I(P.OPAQUE_P256),k=[{id:"input",title:"password input",description:"entering credentials locally",icon:"1"},{id:"validation",title:"input validation",description:"checking password strength",icon:"2"},{id:"generate-keys",title:"generate keys",description:"creating cryptographic keypair",icon:"3"},{id:"registration-request",title:"registration request",description:"sending RegistrationRequest to server",icon:"4"},{id:"server-response",title:"server response",description:"receiving RegistrationResponse",icon:"5"},{id:"finalize",title:"finalize registration",description:"completing OPAQUE protocol",icon:"6"},{id:"totp-setup",title:"2fa setup",description:"configuring time-based authentication",icon:"7"},{id:"totp-verify",title:"verify 2fa",description:"confirming totp code works",icon:"8"},{id:"success",icon:"âœ“",title:"registration complete",description:"account created with 2fa enabled",dataFlow:null}];class C{constructor(){this.steps=k,this.init()}init(){this.renderSteps()}renderSteps(){const s=document.getElementById("live-steps");s&&(s.innerHTML=this.steps.map((e,a)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(s){const e=this.steps.findIndex(a=>a.id===s);this.steps.forEach((a,c)=>{const n=document.getElementById(`step-${a.id}`);n&&(n.className=n.className.replace(/\b(active|processing|completed)\b/g,"").trim(),c<e?n.classList.add("completed"):c===e&&n.classList.add("active"))})}completeStep(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(s,e="success"){const a=document.getElementById("security-status");if(a){const c=e==="success"?"bi-shield-check":"bi-shield-exclamation",n=e==="success"?"text-success":"text-warning";a.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${c} ${n} me-2"></i>
                    <span class="text-white">${s}</span>
                </div>
            `}}}let t;function L(){const r=document.getElementById("hide-sidebar"),s=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");r&&s&&e&&(r.addEventListener("click",()=>{e.classList.add("hidden"),s.style.display="block"}),s.addEventListener("click",()=>{e.classList.remove("hidden"),s.style.display="none"}))}function m(r,s="success"){const e=document.getElementById("alert-container"),a=s==="success"?"alert-success":"alert-danger",c=s==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${a} alert-dismissible fade show" role="alert">
            <i class="${c} me-2"></i>
            ${r}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,s==="success"&&setTimeout(()=>{const n=e.querySelector(".alert");n&&new bootstrap.Alert(n).close()},5e3)}function b(){const r=document.getElementById("alert-container");r.innerHTML=""}function B(r,s){return r!==s?(m("Passwords do not match!","error"),!1):r.length<8?(m("Password must be at least 8 characters long!","error"),!1):!0}document.addEventListener("DOMContentLoaded",async()=>{t=new C,L();const r=document.getElementById("register-form");r&&r.addEventListener("submit",async o=>{o.preventDefault(),b(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const l=new FormData(r),i=l.get("username"),u=l.get("password"),f=l.get("confirm_password");if(!i||!u||!f){m("Please fill in all fields!","error");return}if(t.activateStep("validation"),await new Promise(p=>setTimeout(p,500)),!B(u,f))return;t.completeStep("validation");const d=r.querySelector('button[type="submit"]'),y=d.textContent;d.disabled=!0,d.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Registering...';try{t.activateStep("generate-keys"),t.updateSecurityStatus("Generating cryptographic blinding - your password stays secure"),await new Promise(g=>setTimeout(g,800));const p=new R(w),S=(await p.registerInit(u)).serialize();t.completeStep("generate-keys"),t.activateStep("registration-request"),t.updateSecurityStatus("Sending blinded password to server - original password never leaves this device");const v=await fetch("http://localhost:3000/register/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:i,registrationRequest:S})});if(!v.ok){const g=await v.json();throw new Error(g.error||"Registration failed")}t.completeStep("registration-request"),t.activateStep("server-response"),t.updateSecurityStatus("Server processing blinded password - your actual password remains unknown");const{registrationResponse:T}=await v.json(),E=O.deserialize(w,T);t.completeStep("server-response"),t.activateStep("finalize"),t.updateSecurityStatus("Creating your secure credential file locally"),await new Promise(g=>setTimeout(g,600));const x=(await p.registerFinish(E)).record.serialize();t.completeStep("finalize");const h=await fetch("http://localhost:3000/register/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:i,record:x})});if(!h.ok){const g=await h.json();throw new Error(g.error||"Registration completion failed")}if((await h.json()).success)t.activateStep("totp-setup"),t.updateSecurityStatus("OPAQUE registration complete! Now setting up 2FA..."),document.getElementById("register-form").parentElement.style.display="none",document.getElementById("totp-phase").style.display="block",document.getElementById("back-link").style.display="none",s(),m("OPAQUE registration successful! Please set up 2FA to complete registration.","success");else throw new Error("Registration failed - please try again")}catch(p){console.error("Registration error:",p),m(`Registration failed: ${p.message}`,"error")}finally{d.disabled=!1,d.textContent=y}});async function s(){try{const o=document.getElementById("username").value,l=await fetch("http://localhost:3000/totp/setup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:o})});if(!l.ok)throw new Error("Failed to setup TOTP");const i=await l.json();return document.getElementById("totp-secret").textContent=i.secret,window.currentUsername=o,e(i.qrCode,i.otpauthUrl),a(i.secret),i.secret}catch(o){throw console.error("TOTP setup error:",o),m(`TOTP setup failed: ${o.message}`,"error"),o}}function e(o,l){const i=document.getElementById("qr-code");i.innerHTML=`
            <div class="text-center p-4" style="background: rgba(255,255,255,0.1); border-radius: 8px;">
                <div class="mb-3">
                    <img src="${o}" alt="TOTP QR Code" style="border-radius: 8px; max-width: 200px; max-height: 200px;">
                </div>
                <small class="text-secondary">Scan with Google Authenticator, Authy, or similar app</small>
                <div class="mt-2">
                    <small class="text-muted">Or copy this URI:</small>
                    <div class="mt-1">
                        <input type="text" class="form-control form-control-sm" value="${l}" readonly onclick="this.select()" style="font-size: 10px;">
                    </div>
                </div>
            </div>
        `}function a(o){const l=document.getElementById("qr-code"),i=document.createElement("div");i.className="mt-3 p-2 rounded",i.style.background="rgba(75, 172, 254, 0.1)",i.style.border="1px solid rgba(75, 172, 254, 0.2)",i.innerHTML=`
            <small class="text-info"><i class="bi bi-info-circle me-1"></i>TOTP Secret:</small><br>
            <span class="text-white">Use your authenticator app for verification codes</span><br>
            <small class="text-secondary">Secret: <code>${o}</code></small>
        `,l.appendChild(i)}const c=document.getElementById("totp-verify-form");c&&c.addEventListener("submit",async o=>{o.preventDefault(),b();const i=new FormData(c).get("totp_code");if(!i||i.length!==6){m("Please enter a valid 6-digit code!","error");return}const u=c.querySelector('button[type="submit"]'),f=u.innerHTML;u.disabled=!0,u.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>verifying...';try{t.activateStep("totp-verify"),t.updateSecurityStatus("Verifying 2FA code...");const d=window.currentUsername;if(!d)throw new Error("Username not found");const y=await fetch("http://localhost:3000/totp/verify-setup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:d,token:i})}),p=await y.json();if(console.log("TOTP verification result:",p),!y.ok||!p.success)throw new Error(p.error||"Invalid TOTP code");t.activateStep("success"),t.updateSecurityStatus("Registration complete! Account secured with 2FA."),m("Registration complete! You can now log in with your credentials and 2FA.","success"),setTimeout(()=>{window.location.href="/api/login"},2e3)}catch(d){console.error("TOTP verification error:",d),m(`2FA verification failed: ${d.message||"Invalid code"}`,"error")}finally{u.disabled=!1,u.innerHTML=f}});const n=document.getElementById("totp-code");n&&n.addEventListener("input",()=>{n.value=n.value.replace(/[^0-9]/g,""),n.value.length>6&&(n.value=n.value.slice(0,6))})});
