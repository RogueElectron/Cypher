import{g as P,O as R,a as T,R as I}from"./opaque_client.js";const y=P(R.OPAQUE_P256),B=[{id:"input",title:"password input",description:"entering credentials locally",icon:"1"},{id:"validation",title:"input validation",description:"checking password strength",icon:"2"},{id:"generate-keys",title:"generate keys",description:"creating cryptographic keypair",icon:"3"},{id:"registration-request",title:"registration request",description:"sending RegistrationRequest to server",icon:"4"},{id:"server-response",title:"server response",description:"receiving RegistrationResponse",icon:"5"},{id:"finalize",title:"finalize registration",description:"completing OPAQUE protocol",icon:"6"},{id:"totp-setup",title:"2fa setup",description:"configuring time-based authentication",icon:"7"},{id:"totp-verify",title:"verify 2fa",description:"confirming totp code works",icon:"8"},{id:"success",icon:"âœ“",title:"registration complete",description:"account created with 2fa enabled",dataFlow:null}];class C{constructor(){this.currentStep=0,this.steps=B,this.init()}init(){this.renderSteps()}renderSteps(){const s=document.getElementById("live-steps");s&&(s.innerHTML=this.steps.map((e,r)=>`
            <div class="live-step" id="step-${e.id}">
                <div class="step-icon">
                    <i class="${e.icon}"></i>
                </div>
                <div class="step-content">
                    <div class="step-title">${e.title}</div>
                    <div class="step-description">${e.description}</div>
                    ${e.dataFlow?`<div class="data-flow">${e.dataFlow}</div>`:""}
                </div>
            </div>
        `).join(""))}activateStep(s){const e=this.steps.findIndex(r=>r.id===s);this.steps.forEach((r,o)=>{const i=document.getElementById(`step-${r.id}`);i&&(i.className=i.className.replace(/\b(active|processing|completed)\b/g,"").trim(),o<e?i.classList.add("completed"):o===e&&i.classList.add("active"))})}setProcessing(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active"),e.classList.add("processing"))}completeStep(s){const e=document.getElementById(`step-${s}`);e&&(e.classList.remove("active","processing"),e.classList.add("completed"))}updateSecurityStatus(s,e="success"){const r=document.getElementById("security-status");if(r){const o=e==="success"?"bi-shield-check":"bi-shield-exclamation",i=e==="success"?"text-success":"text-warning";r.innerHTML=`
                <div class="d-flex align-items-center">
                    <i class="${o} ${i} me-2"></i>
                    <span class="text-white">${s}</span>
                </div>
            `}}}let t;function q(){const n=document.getElementById("hide-sidebar"),s=document.getElementById("show-sidebar"),e=document.getElementById("visualization-panel");n&&s&&e&&(n.addEventListener("click",()=>{e.classList.add("hidden"),s.style.display="block"}),s.addEventListener("click",()=>{e.classList.remove("hidden"),s.style.display="none"}))}function l(n,s="success"){const e=document.getElementById("alert-container"),r=s==="success"?"alert-success":"alert-danger",o=s==="success"?"bi-check-circle-fill":"bi-exclamation-triangle-fill";e.innerHTML=`
        <div class="alert ${r} alert-dismissible fade show" role="alert">
            <i class="${o} me-2"></i>
            ${n}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `,s==="success"&&setTimeout(()=>{const i=e.querySelector(".alert");i&&new bootstrap.Alert(i).close()},5e3)}function w(){const n=document.getElementById("alert-container");n.innerHTML=""}function x(n,s){return n!==s?(l("Passwords do not match!","error"),!1):n.length<8?(l("Password must be at least 8 characters long!","error"),!1):!0}document.addEventListener("DOMContentLoaded",async()=>{t=new C,q();const n=document.getElementById("register-form");n&&n.addEventListener("submit",async i=>{i.preventDefault(),w(),t.activateStep("input"),t.updateSecurityStatus("Password entered locally - never transmitted in plaintext");const d=new FormData(n),m=d.get("username"),c=d.get("password"),g=d.get("confirm_password");if(!m||!c||!g){l("Please fill in all fields!","error");return}if(t.activateStep("validation"),await new Promise(p=>setTimeout(p,500)),!x(c,g))return;t.completeStep("validation");const a=n.querySelector('button[type="submit"]'),h=a.textContent;a.disabled=!0,a.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>Registering...';try{t.activateStep("oprf-init"),t.updateSecurityStatus("Generating cryptographic blinding - your password stays secure"),await new Promise(u=>setTimeout(u,800));const p=new T(y),S=(await p.registerInit(c)).serialize();t.completeStep("oprf-init"),t.activateStep("send-request"),t.updateSecurityStatus("Sending blinded password to server - original password never leaves this device");const f=await fetch("http://localhost:3000/register/init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:m,registrationRequest:S})});if(!f.ok){const u=await f.json();throw new Error(u.error||"Registration failed")}t.completeStep("send-request"),t.activateStep("server-processing"),t.updateSecurityStatus("Server processing blinded password - your actual password remains unknown");const{registrationResponse:b}=await f.json(),E=I.deserialize(y,b);t.completeStep("server-processing"),t.activateStep("credential-generation"),t.updateSecurityStatus("Creating your secure credential file locally"),await new Promise(u=>setTimeout(u,600));const L=(await p.registerFinish(E)).record.serialize();t.completeStep("credential-generation"),t.activateStep("final-registration"),t.updateSecurityStatus("Sending encrypted credential to server for storage");const v=await fetch("http://localhost:3000/register/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:m,record:L})});if(!v.ok){const u=await v.json();throw new Error(u.error||"Registration completion failed")}if((await v.json()).success)t.completeStep("final-registration"),t.activateStep("totp-setup"),t.updateSecurityStatus("OPAQUE registration complete! Now setting up 2FA..."),document.getElementById("register-form").parentElement.style.display="none",document.getElementById("totp-phase").style.display="block",document.getElementById("back-link").style.display="none",s(),l("OPAQUE registration successful! Please set up 2FA to complete registration.","success");else throw new Error("Registration failed - please try again")}catch(p){console.error("Registration error:",p),l(`Registration failed: ${p.message}`,"error")}finally{a.disabled=!1,a.textContent=h}});function s(){const i="JBSWY3DPEHPK3PXP";document.getElementById("totp-secret").textContent=i,e()}function e(i){const d=document.getElementById("qr-code");d.innerHTML=`
            <div class="text-center p-4" style="background: rgba(255,255,255,0.1); border-radius: 8px;">
                <i class="bi bi-qr-code" style="font-size: 120px; color: #667eea;"></i>
                <p class="text-secondary mt-2">QR Code will be generated here</p>
            </div>
        `}const r=document.getElementById("totp-verify-form");r&&r.addEventListener("submit",async i=>{i.preventDefault(),w();const m=new FormData(r).get("totp_code");if(!m||m.length!==6){l("Please enter a valid 6-digit code!","error");return}const c=r.querySelector('button[type="submit"]'),g=c.innerHTML;c.disabled=!0,c.innerHTML='<span class="spinner-border spinner-border-sm me-2" role="status"></span>verifying...';try{t.activateStep("totp-verify"),t.updateSecurityStatus("Verifying 2FA code..."),await new Promise(a=>setTimeout(a,1e3)),t.activateStep("success"),t.updateSecurityStatus("Registration complete! Account secured with 2FA."),l("Registration complete! You can now log in with your credentials and 2FA.","success"),setTimeout(()=>{window.location.href="/api/login"},2e3)}catch(a){console.error("TOTP verification error:",a),l(`2FA verification failed: ${a.message||"Invalid code"}`,"error")}finally{c.disabled=!1,c.innerHTML=g}});const o=document.getElementById("totp-code");o&&o.addEventListener("input",()=>{o.value=o.value.replace(/[^0-9]/g,""),o.value.length>6&&(o.value=o.value.slice(0,6))})});
